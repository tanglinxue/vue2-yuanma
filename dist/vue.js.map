{"version":3,"file":"vue.js","sources":["../src/observe/arr.js","../src/observe/index.js","../src/initState.js","../src/compile/parseAst.js","../src/compile/generate.js","../src/compile/index.js","../src/lifecycle.js","../src/init.js","../src/vnode/index.js","../src/index.js"],"sourcesContent":["//重新写数组\r\n//(1) 获取原来的数组方法\r\nlet oldArrayProtoMethods = Array.prototype;\r\n\r\n//（2）继承\r\nexport let ArrayMethods = Object.create(oldArrayProtoMethods)\r\n\r\n\r\nlet methods = [\r\n  'push',\r\n  'pop',\r\n  'unshift',\r\n  'shift',\r\n  'splice',\r\n  'reverse',\r\n  'sort'\r\n]\r\n\r\nmethods.forEach(item=>{\r\n  ArrayMethods[item] = function(...args){\r\n    let result = oldArrayProtoMethods[item].apply(this,args)\r\n    let inserted\r\n    switch(item){\r\n      case 'push':\r\n      case 'unshift':\r\n        inserted = args\r\n        break\r\n      case 'splice':\r\n        inserted = args.splice(2)\r\n    }\r\n    let ob = this.__ob__;\r\n    if(inserted){\r\n      ob.observeArray(inserted)\r\n    }\r\n    return result\r\n  }\r\n})\r\n\r\n\r\n","\nimport {ArrayMethods} from './arr'\nexport function observer(data) {\n    if(typeof data != 'object' || data == null){\n      return data\n    }\n    return new Observer(data)\n}\n\nclass Observer{\n  constructor(value){\n    Object.defineProperty(value,'__ob__',{\n      enumerable:false,\n      value:this\n    })\n    //判断数据\n    if(Array.isArray(value)){\n      value.__proto__ = ArrayMethods\n      this.observeArray(value)\n    }else{\n      this.walk(value)\n    }\n  }\n  observeArray(value){\n    for(let i=0;i<value.length;i++){\n      observer(value[i])\n    }\n  }\n  walk(data){\n    let keys = Object.keys(data)\n    for(let i=0;i<keys.length;i++){\n      let key = keys[i];\n      let value = data[key];\n      defineReactive(data,key,value)\n    }\n  }\n}\n\nfunction defineReactive(data,key,value){\n    observer(value);\n    Object.defineProperty(data,key,{\n      get(){\n        console.log('获取的时候触发')\n        return value\n      },\n      set(newValue){\n        console.log('设置的时候触发')\n        if(newValue === value) return;\n        value = newValue\n        observer(value);\n      }\n    })\n}\n","import { observer } from './observe/index'\nexport function initState(vm) {\n    let opts = vm.$options;\n    if (opts.props) {\n        initProps()\n    }\n    if (opts.data) {\n        initData(vm)\n    }\n    if (opts.watch) {\n        initWatch()\n    }\n    if (opts.computed) {\n        initComputed()\n    }\n    if (opts.methods) {\n        initMethods()\n    }\n}\nfunction initData(vm) {\n    let data = vm.$options.data;\n    data = vm._data = typeof data === 'function' ? data.call(vm) : data;\n \n    observer(data)\n    for(let key in data){\n      proxy(vm,'_data',key)\n    }\n}\nfunction proxy(vm,source,key){\n  Object.defineProperty(vm,key,{\n    get(){\n      return vm[source][key]\n    },\n    set(newValue){\n      vm[source][key] = newValue\n    }\n  })\n}\nfunction initProps() {\n\n}\nfunction initWatch() {\n\n}\nfunction initComputed() {\n\n}\nfunction initMethods() {\n\n}\n","\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`;   // 标签名称\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`; //<span:xx>\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 标签开头的正则 捕获的内容是标签名\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`); // 匹配标签结尾的 </div>\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // 匹配属性的\r\n//<div id=\"app\"></div>\r\nconst startTagClose = /^\\s*(\\/?)>/; // 匹配标签结束的 >\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g // {{}}\r\n\r\n//创建ast语法树\r\nfunction createASTElement(tag,attrs){\r\n  return {\r\n    tag,//标签名称\r\n    attrs,\r\n    children:[],\r\n    type:1,\r\n    parent:null\r\n  }\r\n}\r\n\r\nlet root;//根元素\r\nlet createParent\r\nlet stack = []\r\n\r\nfunction start(tag,attrs){//开始标签\r\n  //console.log(tag,'开始标签')\r\n  let element = createASTElement(tag,attrs)\r\n  if(!root){\r\n    root = element\r\n  }\r\n  createParent = element\r\n  stack.push(element)\r\n}\r\n\r\nfunction charts(text){\r\n  //console.log(text,'文本')\r\n  text = text.replace(/\\s/g,'')\r\n  if(text){\r\n    createParent.children.push({\r\n      type:3,\r\n      text\r\n    })\r\n  }\r\n}\r\nfunction end(tag){\r\n  //console.log(tag,'结束标签')\r\n  let element = stack.pop()\r\n  createParent = stack[stack.length-1];\r\n  if(createParent){//元素的关闭\r\n    element.parent = createParent.tag;\r\n    createParent.children.push(element)\r\n  }\r\n}\r\nexport function parseHTML(html){\r\n  while(html){ // html  为空结束\r\n    let textEnd = html.indexOf('<')\r\n    if(textEnd === 0){\r\n      //（1） 开始标签\r\n      const startTagMatch = parseStartTag()\r\n      if(startTagMatch){\r\n        start(startTagMatch.tagName,startTagMatch.attrs)\r\n        continue\r\n      } \r\n       //结束标签 \r\n      let endTagMatch = html.match(endTag)\r\n      if(endTagMatch){\r\n        advance(endTagMatch[0].length)\r\n        end(endTagMatch[0])\r\n        continue\r\n      }\r\n    }\r\n    //文本\r\n    let text\r\n    if(textEnd > 0){\r\n       //获取文本内容\r\n      text = html.substring(0,textEnd) \r\n    }  \r\n    if(text){\r\n      advance(text.length)\r\n      charts(text)\r\n    }\r\n  }\r\n  function parseStartTag(){\r\n    const start = html.match(startTagOpen)\r\n    if(!start) return \r\n   \r\n    //创建ast 语法树\r\n    let match = {\r\n      tagName:start[1],\r\n      attrs:[]\r\n    }\r\n    //删除 开始标签\r\n    advance(start[0].length)\r\n    //属性\r\n    //注意  多个 遍历\r\n    //注意 >\r\n    let attr\r\n    let end \r\n    while(!(end = html.match(startTagClose)) && (attr = html.match(attribute))){\r\n      match.attrs.push({\r\n        name:attr[1],\r\n        value:attr[3]||attr[4]||attr[5]\r\n      })\r\n      advance(attr[0].length)\r\n    }\r\n    if(end){\r\n      advance(end[0].length)\r\n      return match\r\n    }\r\n  }\r\n  function advance(n){\r\n    html = html.substring(n)\r\n  }\r\n  return root\r\n}\r\n","\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g // {{}}\r\nfunction genProps(attrs){\r\n  let str = ''\r\n  for(let i=0;i<attrs.length;i++){\r\n    let attr = attrs[i];\r\n    if(attr.name === 'style'){\r\n      let obj = {}\r\n      attr.value.split(';').forEach(item=>{\r\n        let [key,value] = item.split(':')\r\n        obj[key] = value\r\n      })\r\n      attr.value = obj\r\n    }\r\n    str += `${attr.name}:${JSON.stringify(attr.value)},`\r\n  }\r\n  return `{${str.slice(0,-1)}}`\r\n}\r\n//判断是否有儿子\r\nfunction getChildren(el){\r\n  const children = el.children;\r\n  if(children){\r\n    return children.map(child=>gen(child)).join(',')\r\n  }\r\n}\r\nfunction gen(node){//获取到的元素\r\n   //注意 是什么类型  文本   div\r\n  if(node.type===1){\r\n    //return generate(node)//生成元素节点的字符串\r\n    return generate(node)\r\n  }else{\r\n    let text = node.text;// 获取文本  注意  普通的文本  hello{{name}}?{{num}}\r\n    if(!defaultTagRE.test(text)){\r\n      return `_v(${JSON.stringify(text)})`\r\n    }\r\n    let tokens = [] //存放每一段的代码\r\n    let lastIndex = defaultTagRE.lastIndex = 0;//如果正则是全局模式 需要每次使用前变为0\r\n    let match;// 每次匹配到的结果  exec 获取 {{name}}\r\n    while(match = defaultTagRE.exec(text)){\r\n      let index = match.index;\r\n      if(index>lastIndex){\r\n        tokens.push(JSON.stringify(text.slice(lastIndex,index)))\r\n      }\r\n      tokens.push(`_s(${match[1].trim()})`)\r\n      lastIndex = index + match[0].length\r\n    }\r\n    if(lastIndex<text.length){\r\n      tokens.push(JSON.stringify(text.slice(lastIndex)))\r\n    }\r\n    return `_v(${tokens.join(\"+\")})`\r\n  }\r\n}\r\n//语法层面的转移\r\nexport function generate(el){\r\n  let children = getChildren(el)\r\n  //方法 拼接字符串  源码也是这样操作 [{}]    ${el.attrs.length?`{style:{color:red}}`:'undefined'}\r\n  let code = `_c('${el.tag}',${el.attrs.length?`${genProps(el.attrs)}`:'undefined'}${children?`,${children}`:''})`\r\n  return code\r\n}\r\n","\r\nimport {parseHTML} from './parseAst'\r\nimport {generate} from './generate'\r\nexport function compilrToFunction(el){\r\n  //1 将html 变成ast 语法树\r\n  let ast = parseHTML(el)\r\n  console.log(ast)\r\n   //2 ast 语法树变成 render 函数  （1） ast 语法树变成 字符串  （2）字符串变成函数 \r\n  let code = generate(ast)\r\n  let render = new Function(`with(this){return ${code}}`)\r\n  return render\r\n}\r\n","export function mountComponent(vm,el){\r\n  vm._update(vm._render())\r\n}\r\n\r\nexport function lifecycleMixin(Vue){\r\n  Vue.prototype._update = function(vnode){\r\n      console.log(vnode)\r\n      let vm = this;\r\n      vm.$el = patch(vm.$el,vnode)\r\n  }\r\n}\r\n","import { initState } from './initState'\r\nimport {compilrToFunction} from './compile/index'\r\nimport {mountComponent} from './lifecycle'\r\nexport function initMixin(Vue) {\r\n  Vue.prototype._init = function (options) {\r\n    let vm = this;\r\n    vm.$options = options;\r\n    initState(vm)\r\n    if (vm.$options.el) {\r\n      vm.$mount(vm.$options.el)\r\n    }\r\n  }\r\n\r\n  Vue.prototype.$mount = function (el) {\r\n    let vm = this\r\n    el = document.querySelector(el) //获取元素\r\n    vm.$el = el\r\n    let options = vm.$options\r\n    if (!options.render) { //没有\r\n        let template = options.template\r\n        if (!template && el) {\r\n            //获取html\r\n            el = el.outerHTML\r\n            //变成ast语法树\r\n            let render = compilrToFunction(el)\r\n            console.log(render)\r\n            options.render = render\r\n        }\r\n    }\r\n    // 挂载组件\r\n    mountComponent(vm,el)\r\n  }\r\n}\r\n\r\n\r\n","export function renderMixin(Vue){\r\n  Vue.prototype._c = function(){\r\n     return createElement(...arguments)\r\n  }\r\n  Vue.prototype._v = function(text){\r\n    return createText(text)\r\n  }\r\n  Vue.prototype._s = function(val){//变量\r\n    return val === null ? '':(typeof val==='object')?JSON.stringify(val):val\r\n  }\r\n  Vue.prototype._render = function(){\r\n    let vm = this;\r\n    let render = vm.$options.render;\r\n    let vnode = render.call(this)\r\n    return vnode\r\n  }\r\n}\r\n\r\nfunction createElement(tag,data={},...children){\r\n  return vnode(tag,data,data.key,children)\r\n}\r\n\r\nfunction createText(text){\r\n  return vnode(undefined,undefined,undefined,undefined,text)\r\n}\r\n\r\nfunction vnode(tag,data,key,children,text){\r\n  return {\r\n    tag,data,key,children,text\r\n  }\r\n}\r\n","import {initMixin} from './init'\r\nimport {lifecycleMixin} from './lifecycle'\r\nimport {renderMixin} from './vnode/index'\r\n\r\nfunction Vue(options){\r\n  this._init(options)\r\n}\r\n\r\ninitMixin(Vue)\r\nlifecycleMixin(Vue)\r\nrenderMixin(Vue)\r\nexport default Vue\r\n"],"names":["oldArrayProtoMethods","Array","prototype","ArrayMethods","Object","create","methods","forEach","item","_len","arguments","length","args","_key","result","apply","inserted","splice","ob","__ob__","observeArray","observer","data","_typeof","Observer","value","_classCallCheck","defineProperty","enumerable","isArray","__proto__","walk","_createClass","key","i","keys","defineReactive","get","console","log","set","newValue","initState","vm","opts","$options","props","initData","watch","computed","_data","call","proxy","source","ncname","qnameCapture","concat","startTagOpen","RegExp","endTag","attribute","startTagClose","createASTElement","tag","attrs","children","type","parent","root","createParent","stack","start","element","push","charts","text","replace","end","pop","parseHTML","html","textEnd","indexOf","startTagMatch","parseStartTag","tagName","endTagMatch","match","advance","substring","attr","name","n","defaultTagRE","genProps","str","_loop","obj","split","_item$split","_item$split2","_slicedToArray","JSON","stringify","slice","getChildren","el","map","child","gen","join","node","generate","test","tokens","lastIndex","exec","index","trim","code","compilrToFunction","ast","render","Function","mountComponent","_update","_render","lifecycleMixin","Vue","vnode","$el","patch","initMixin","_init","options","$mount","document","querySelector","template","outerHTML","renderMixin","_c","createElement","_v","createText","_s","val","undefined"],"mappings":"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"}